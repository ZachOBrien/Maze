#! /usr/bin/env racket
#lang racket/base

(require json)


;; Path (cons Path Path) -> Void
(define (run-test-case executable test-case)
  (define test-case-input-port (open-input-file (car test-case)))
  (define expected-output (read-json (open-input-file (cdr test-case))))
  (define-values (proc child-out child-in e) (subprocess #f test-case-input-port #f #f executable))
  (define actual-output (read-json child-out))
  (define passed? (if (equal? actual-output expected-output) "PASS" "FAIL"))
  (display (string-append (car test-case) " ..... " passed? "\n")))


;; Test milestone 2
(display "--- Board ---\n")
(define milestone-2-test-cases (list (cons "IntegrationTests/board/Tests/0-in.json" "IntegrationTests/board/Tests/0-out.json")
                                     (cons "IntegrationTests/board/Tests/1-in.json" "IntegrationTests/board/Tests/1-out.json")
                                     (cons "IntegrationTests/board/Tests/2-in.json" "IntegrationTests/board/Tests/2-out.json")
                                     (cons "IntegrationTests/board/ForStudents/0-in.json" "IntegrationTests/board/ForStudents/0-out.json")
                                     (cons "IntegrationTests/board/ForStudents/1-in.json" "IntegrationTests/board/ForStudents/1-out.json")
                                     (cons "IntegrationTests/board/ForStudents/2-in.json" "IntegrationTests/board/ForStudents/2-out.json")))
(for ([testcase milestone-2-test-cases])
  (run-test-case "IntegrationTests/board/xboard" testcase))

(display "--- Gamestate ---\n")
;; Test milestone 3
(define milestone-3-test-cases (list (cons "IntegrationTests/state/Tests/0-in.json" "IntegrationTests/state/Tests/0-out.json")
                                     (cons "IntegrationTests/state/Tests/1-in.json" "IntegrationTests/state/Tests/1-out.json")
                                     (cons "IntegrationTests/state/Tests/2-in.json" "IntegrationTests/state/Tests/2-out.json")
                                     (cons "IntegrationTests/state/Tests/3-in.json" "IntegrationTests/state/Tests/3-out.json")
                                     (cons "IntegrationTests/state/Tests/4-in.json" "IntegrationTests/state/Tests/4-out.json")
                                     (cons "IntegrationTests/state/ForStudents/0-in.json" "IntegrationTests/state/ForStudents/0-out.json")
                                     (cons "IntegrationTests/state/ForStudents/1-in.json" "IntegrationTests/state/ForStudents/1-out.json")
                                     (cons "IntegrationTests/state/ForStudents/2-in.json" "IntegrationTests/state/ForStudents/2-out.json")))
(for ([testcase milestone-3-test-cases])
  (run-test-case "IntegrationTests/state/xstate" testcase))

(display "--- Strategy ---\n")
;; Test milestone 4
(define milestone-4-test-cases (list (cons "IntegrationTests/strategy/Tests/0-in.json" "IntegrationTests/strategy/Tests/0-out.json")
                                     (cons "IntegrationTests/strategy/Tests/1-in.json" "IntegrationTests/strategy/Tests/1-out.json")
                                     (cons "IntegrationTests/strategy/Tests/2-in.json" "IntegrationTests/strategy/Tests/2-out.json")
                                     (cons "IntegrationTests/strategy/Tests/3-in.json" "IntegrationTests/strategy/Tests/3-out.json")
                                     (cons "IntegrationTests/strategy/Tests/4-in.json" "IntegrationTests/strategy/Tests/4-out.json")
                                     (cons "IntegrationTests/strategy/ForStudents/0-in.json" "IntegrationTests/strategy/ForStudents/0-out.json")
                                     (cons "IntegrationTests/strategy/ForStudents/1-in.json" "IntegrationTests/strategy/ForStudents/1-out.json")
                                     (cons "IntegrationTests/strategy/ForStudents/2-in.json" "IntegrationTests/strategy/ForStudents/2-out.json")))
(for ([testcase milestone-4-test-cases])
  (run-test-case "IntegrationTests/strategy/xchoice" testcase))

(display "--- Games ---\n")
;; Test milestone 5
(define milestone-5-test-cases (list (cons "IntegrationTests/game/Tests/0-in.json" "IntegrationTests/game/Tests/0-out.json")
                                     (cons "IntegrationTests/game/Tests/1-in.json" "IntegrationTests/game/Tests/1-out.json")
                                     (cons "IntegrationTests/game/Tests/2-in.json" "IntegrationTests/game/Tests/2-out.json")
                                     (cons "IntegrationTests/game/ForStudents/0-in.json" "IntegrationTests/game/ForStudents/0-out.json")
                                     (cons "IntegrationTests/game/ForStudents/1-in.json" "IntegrationTests/game/ForStudents/1-out.json")
                                     (cons "IntegrationTests/game/ForStudents/2-in.json" "IntegrationTests/game/ForStudents/2-out.json")))
(for ([testcase milestone-5-test-cases])
  (run-test-case "IntegrationTests/6/xgames" testcase))

(display "--- Fault tolerance 1 ---\n")
;; Test milestone 6
(define milestone-6-test-cases (list (cons "IntegrationTests/resiliency-1/Tests/0-in.json" "IntegrationTests/resiliency-1/Tests/0-out.json")
                                     (cons "IntegrationTests/resiliency-1/Tests/1-in.json" "IntegrationTests/resiliency-1/Tests/1-out.json")
                                     (cons "IntegrationTests/resiliency-1/Tests/2-in.json" "IntegrationTests/resiliency-1/Tests/2-out.json")
                                     (cons "IntegrationTests/resiliency-1/ForStudents/0-in.json" "IntegrationTests/resiliency-1/ForStudents/0-out.json")
                                     (cons "IntegrationTests/resiliency-1/ForStudents/1-in.json" "IntegrationTests/resiliency-1/ForStudents/1-out.json")
                                     (cons "IntegrationTests/resiliency-1/ForStudents/2-in.json" "IntegrationTests/resiliency-1/ForStudents/2-out.json")))
(for ([testcase milestone-6-test-cases])
  (run-test-case "IntegrationTests/resiliency-1/xbad" testcase))

(display "--- Fault tolerance 2 ---\n")
;; Test milestone 7
(define milestone-7-test-cases (list (cons "IntegrationTests/resiliency-2/Tests/0-in.json" "IntegrationTests/resiliency-2/Tests/0-out.json")
                                     (cons "IntegrationTests/resiliency-2/Tests/1-in.json" "IntegrationTests/resiliency-2/Tests/1-out.json")
                                     (cons "IntegrationTests/resiliency-2/Tests/2-in.json" "IntegrationTests/resiliency-2/Tests/2-out.json")
                                     (cons "IntegrationTests/resiliency-2/Tests/3-in.json" "IntegrationTests/resiliency-2/Tests/3-out.json")
                                     (cons "IntegrationTests/resiliency-2/Tests/4-in.json" "IntegrationTests/resiliency-2/Tests/4-out.json")
                                     (cons "IntegrationTests/resiliency-2/ForStudents/0-in.json" "IntegrationTests/resiliency-2/ForStudents/0-out.json")
                                     (cons "IntegrationTests/resiliency-2/ForStudents/1-in.json" "IntegrationTests/resiliency-2/ForStudents/1-out.json")
                                     (cons "IntegrationTests/resiliency-2/ForStudents/2-in.json" "IntegrationTests/resiliency-2/ForStudents/2-out.json")))
(for ([testcase milestone-7-test-cases])
  (run-test-case "IntegrationTests/resiliency-2/xbad2" testcase))

(display "--- Server ---\n")
;; Test milestone 8
(define milestone-8-test-cases (list (cons "IntegrationTests/server/ForStudents/0-in.json" "IntegrationTests/server/ForStudents/0-out.json")
                                     (cons "IntegrationTests/server/ForStudents/1-in.json" "IntegrationTests/server/ForStudents/1-out.json")
                                     (cons "IntegrationTests/server/ForStudents/2-in.json" "IntegrationTests/server/ForStudents/2-out.json")))
(for ([testcase milestone-8-test-cases])
  (run-test-case "IntegrationTests/full-remote/xbad3" testcase))

(display "--- Full remote ---\n")
;; Test milestone 9
(define milestone-9-test-cases (list (cons "IntegrationTests/full-remote/Tests/0-in.json" "IntegrationTests/full-remote/Tests/0-out.json")
                                     (cons "IntegrationTests/full-remote/Tests/1-in.json" "IntegrationTests/full-remote/Tests/1-out.json")
                                     (cons "IntegrationTests/full-remote/Tests/2-in.json" "IntegrationTests/full-remote/Tests/2-out.json")
                                     (cons "IntegrationTests/full-remote/Tests/3-in.json" "IntegrationTests/full-remote/Tests/3-out.json")
                                     (cons "IntegrationTests/full-remote/Tests/4-in.json" "IntegrationTests/full-remote/Tests/4-out.json")
                                     (cons "IntegrationTests/full-remote/ForStudents/0-in.json" "IntegrationTests/full-remote/ForStudents/0-out.json")
                                     (cons "IntegrationTests/full-remote/ForStudents/1-in.json" "IntegrationTests/full-remote/ForStudents/1-out.json")
                                     (cons "IntegrationTests/full-remote/ForStudents/2-in.json" "IntegrationTests/full-remote/ForStudents/2-out.json")))
(for ([testcase milestone-9-test-cases])
  (run-test-case "IntegrationTests/full-remote/xbad3" testcase))

(display "Done\n")
