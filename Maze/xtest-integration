#! /usr/bin/env racket
#lang racket/base

(require json)
(require rackunit)


;; Path (cons Path Path) -> Void
(define (run-test-case executable test-case)
  (define test-case-input-port (open-input-file (car test-case)))
  (define expected-output (read-json (open-input-file (cdr test-case))))
  (define-values (proc child-out child-in e) (subprocess #f test-case-input-port #f #f executable))
  (define actual-output (read-json child-out))
  (check-equal? actual-output expected-output))

;; Test milestone 2
(define milestone-3-test-cases (list (cons "../3/Tests/1-in.json" "../3/Tests/1-out.json")
                                     (cons "../3/Tests/2-in.json" "../3/Tests/2-out.json")
                                     (cons "../3/Tests/3-in.json" "../3/Tests/3-out.json")))
(for ([testcase milestone-3-test-cases])
  (run-test-case "../3/xboard" testcase))


;; Test milestone 3
(define milestone-4-test-cases (list (cons "../4/Tests/1-in.json" "../4/Tests/1-out.json")
                                     (cons "../4/Tests/2-in.json" "../4/Tests/2-out.json")
                                     (cons "../4/Tests/3-in.json" "../4/Tests/3-out.json")
                                     (cons "../4/Tests/4-in.json" "../4/Tests/4-out.json")
                                     (cons "../4/Tests/5-in.json" "../4/Tests/5-out.json")))
(for ([testcase milestone-4-test-cases])
  (run-test-case "../4/xstate" testcase))


